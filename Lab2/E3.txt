.data
test_input: .word 3 6 7 8

.text
main:
	add t0, x0, x0			# t0 = 0, present count
	addi t1, x0, 4			# t1 = 4, ending count
	la t2, test_input		# t2 is the pointer to array of 4 numbers
main_loop:
	beq t0, t1, main_exit	# present < ending ?
	slli t3, t0, 2			# t3 = sizeof(word) * t0
	add t4, t2, t3			# t4 is the pointer to the present number
	lw a0, 0(t4)			# a0 has the number

	addi sp, sp, -20		# stack
	sw t0, 0(sp)
	sw t1, 4(sp)
	sw t2, 8(sp)
	sw t3, 12(sp)
	sw t4, 16(sp)

	jal ra, factorial		# factorial(n)

	lw t0, 0(sp)
	lw t1, 4(sp)
	lw t2, 8(sp)
	lw t3, 12(sp)
	lw t4, 16(sp)
	addi sp, sp, 20			# end stack

	addi a1, a0, 0
	addi a0, x0, 1
	ecall 					# Print Result
	addi a1, x0, ' '
	addi a0, x0, 11
	ecall					# Print ' '
	
	addi t0, t0, 1
	jal x0, main_loop
main_exit:  
	addi a0, x0, 10
	ecall 					# Exit

factorial:
	mv s0, a0				# save argument n
    addi a0, zero, 1		# a0 to 1 in case ret
    addi t0, zero, 2		# t0 is the break_limit
    blt s0, t0, finished	# n < break_limit ?
    addi sp, sp, -12		#stack
    sw s0, 0(sp)
    sw t0, 4(sp)
    sw ra, 8(sp)
    addi, a0, s0, -1		# a0 = n - 1, the argument to next level
    jal ra, factorial		# factorial(n-1)
    lw s0, 0(sp)
    lw t0, 4(sp)
    lw ra, 8(sp)
    addi, sp, sp, 12		# end stack
    mul a0, a0, s0			# factorial(n) = n * factorial(n-1)
    
finished:
    ret						# return
